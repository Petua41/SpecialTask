<?xml version="1.0" encoding="utf-8" ?>
<commands>
	<!-- new -->
	<command userInput="new circle" commandClass="CreateCircleCommand" supportsUndo="true">
Adds circle to the screen
[color:Magenta]Necessary arguments:[color]
	-x --center_x         X of center
	-y --center_y         Y of center
	-C --color            Outline color
	-r --radius           Radius
	-t --line_thickness   Outline thickness
[color:Magenta]Unnecessary arguments:[color]
	-s --streak           Fill with texture
	-c --streak_color     Color to fill
	-T --texture          Texture to fill<argument shortArgument="-x" longArgument="--center_x" type="Int" isNecessary="true" commandParameterName="centerX"/>
		<argument shortArgument="-y" longArgument="--center_y" type="Int" isNecessary="true" commandParameterName="centerY"/>
		<argument shortArgument="-C" longArgument="--color" type="Color" isNecessary="true" commandParameterName="color"/>
		<argument shortArgument="-r" longArgument="--radius" type="Int" isNecessary="true" commandParameterName="radius"/>
		<argument shortArgument="-t" longArgument="--line_thickness" type="Int" isNecessary="true" comandParameterName="lineThickness"/>
		<argument shortArgument="-s" longArgument="--streak" comandParameterName="streak" defaultValue="false"/>
		<argument shortArgument="-c" longArgument="--streak_color" type="Color" comandParameterName="streakColor" defaultValue="None"/>
		<argument shortArgument="-T" longArgument="--texture" type="Texture" comandParameterName="streakTexture" defaultValue="None"/>
	</command>
	<command userInput="new rectangle" commandClass="CreateSquareCommand" supportsUndo="true">
Adds rectangle to the screen
[color:Magenta]Necessary arguments:[color]
	-x --left_top_x       X of left-top corner
	-y --left_top_y       Y of center
	-X --right_bottom_x   X of right-bottom corner
	-Y --right_bottom_y   Y of right-bottom corner
	-C --color            Outline color
	-t --line_thickness   Outline thickness
[color:Magenta]Unnecessary arguments:[color]
	-s --streak           Fill with texture
	-c --streak_color     Color to fill
	-T --texture          Texture to fill<argument shortArgument="-x" longArgument="--left_top_x" type="Int" isNecessary="true" commandParameterName="leftTopX"/>
		<argument shortArgument="-y" longArgument="--left_top_y" type="Int" isNecessary="true" commandParameterName="leftTopY"/>
		<argument shortArgument="-X" longArgument="--right_bottom_x" type="Int" isNecessary="true" commandParameterName="rightBottomX"/>
		<argument shortArgument="-Y" longArgument="--right_bottom_y" type="Int" isNecessary="true" commandParameterName="rightBottomY"/>
		<argument shortArgument="-C" longArgument="--color" type="Color" isNecessary="true" commandParameterName="color"/>
		<srgument shortArgument="-t" longArgument="--line_thickness" type="Int" isNecessary="true" comandParameterName="lineThickness"/>
		<argument shortArgument="-s" longArgument="--streak" tcomandParameterName="streak" defaultValue="false"/>
		<argument shortArgument="-c" longArgument="--streak_color" type="Color" comandParameterName="streakColor" defaultValue="None"/>
		<argument shortArgument="-T" longArgument="--texture" type="Texture" comandParameterName="streakTexture" defautValue="None"/>
	</command>
	<command userInput="new line" commandClass="CreateLineCommand" supportsUndo="true">
Adds line to the screen
[color:Magenta]Necessary arguments:[color]
-x --first_x          X of first point
-y --first_y          Y of first point
-X --second_x         X of second point
-Y --second_y         Y of second point
-C --color            Line color
-t --line_thickness   Line thickness
[color:Magenta]Unnecessary arguments:[color]
-s --streak           Fill with texture (it have no effect, because line has no square. But you still can use it)
-c --streak_color     Color to fill
-T --texture          Texture to fill<argument shortArgument="-x" longArgument="--first_x" type="Int" isNecessary="true" commandParameterName="firstX"/>
		<argument shortArgument="-y" longArgument="--first_y" type="Int" isNecessary="true" commandParameterName="firstY"/>
		<argument shortArgument="-X" longArgument="--second_x" type="Int" isNecessary="true" commandParameterName="secondX"/>
		<argument shortArgument="-Y" longArgument="--second_y" type="Int" isNecessary="true" commandParameterName="secondY"/>
		<argument shortArgument="-C" longArgument="--color" type="Color" isNecessary="true" commandParameterName="color"/>
		<srgument shortArgument="-t" longArgument="--line_thickness" type="Int" isNecessary="true" comandParameterName="lineThickness"/>
		<argument shortArgument="-s" longArgument="--streak" comandParameterName="streak" defaultValue="false"/>
		<argument shortArgument="-c" longArgument="--streak_color" type="Color" comandParameterName="streakColor" defaultValue="None"/>
		<argument shortArgument="-T" longArgument="--texture" type="Texture" comandParameterName="streakTexture" defaultValue="None"/>
	</command>
	<!-- window -->
	<command userInput="window create" commandClass="CreateWindowCommand">Creates new window for drawing</command>
	<command userInput="window delete" commandClass="DeleteWindowCommand">
Closes specified window
[color:Magenta]Necessary arguments:[color]
	-n --number           Number of window (written in window title)<argument shortArgument="-n" longArgument="--number" type="Int" commandParameterName="number"/>
	</command>
	<command userInput="window switch" commandClass="SwitchWindowCommand">
Switches to specified window
[color:Magenta]Necessary arguments:[color]
	-n --number           Number of window (written in window title)<argument shortArgument="-n" longArgument="--number" type="Int" commandParameterName="number"/>
	</command>
	<!-- edit -->
	<command userInput="edit" commandClass="EditShapeAttributesCommand" supportsUndo="true">
Select figure on the screen and edit it
[color:Magenta]Unnecessary arguments:[color]
	-t --creation_time    Display shapes in creation time order	[default]
	-c --coordinates      Display shapes in coordinates order<argument shortArgument="-t" longArgument="--creation_time" commandParameterName="creationTime" defaultValue="true"/>
		<argument shortArgument="-c" longArgument="--coordinates" commandParameterName="creationTime" defaultValue="false"/>
	</command>
	<!-- select -->
	<command userInput="select" commandClass="SelectCommand">
Selects rectangular area, specified by coordinates of left-top and right-bottom corners
[color:Magenta]Necessary arguments:[color]
	-x --left_top_x       X of left-top corner
	-y --left_top_y       Y of left-top corner
	-X --right_bottom_x   X of right-bottom corner
	-Y --right_bottom_y   Y of right-bottom corner<argument shortArgument="-x" longArgument="--left_top_x" type="Int" isNecessary="true" commandParameterName="leftTopX"/>
		<argument shortArgument="-y" longArgument="--left_top_y" type="Int" isNecessary="true" commandParameterName="leftTopY"/>
		<argument shortArgument="-X" longArgument="--right_bottom_x" type="Int" isNecessary="true" commandParameterName="rightBottomX"/>
		<argument shortArgument="-Y" longArgument="--right_bottom_y" type="Int" isNecessary="true" commandParameterName="rightBottomY"/>
	</command>
	<!-- undo -->
	<command userInput="undo" commandClass="UndoCommand">
Cancels the specified number (default is 1) of last commands
[color:Magenta]Unnecessary arguments:[color]
	-n --number       Number of commands to cancel<argument shortArgument="-n" longArgument="--number" type="Int" commandParameterName="number" defaultValue="1"/>
	</command>
	<!-- redo -->
	<command userInput="redo" commandClass="RedoCommand">
Repeats the specified number (default is 1) of last cancelled commands
[color:Magenta]Unnecessary arguments:[color]
-n --number         Number of commands to repeat<argument shortArgument="-n" longArgument="--number" type="Int" commandParameterName="number" defaultValue="1"/>
	</command>
	<!-- save -->
	<command userInput="save" commandClass="SaveCommand">Save file</command>
	<!-- save_as -->
	<command userInput="save_as" commandClass="SaveAsCommand">Save file as<argument shortArgument="-f" longArgument="--filename" type="String" commandParameterName="filename"/>
	</command>
	<!-- load -->
	<command userInput="load" commandClass="LoadCommand">Load file<argument shortArgument="-f" longArgument="--filename" type="String" commandParameterName="filename"/>
	</command>
  <!-- exit -->
  <command userInput="exit" commandClass="ExitCommand">Close application</command>

	<!-- fictional commands -->
	<command userInput="new" fictional="true">
Adds specified shape to the screen. You cannot invoke this command without specifying shape
[color:Magenta]Unnecessary arguments:[color]
	-s --streak         Fill with texture
	-c --streak_color   Color to fill
	-T --texture        Texture to fill</command>
	<command userInput="window" fictional="true">Controls windows. You cannot invoke this command without specifying concrete action</command>
	
	<!-- common help -->
	<help>
Special Task 1

Console-managed graphic editor

Usage: command [arguments]

[color:Magenta]Commands:[color]
	new           Add shape to the screen
	window        Control windows
	edit          Edit shapes on the screen
	select        Select rectangular area
	undo          Undo last actions
	redo          Redo last actions
	save          Save
	save_as       Save as
	load          Load
	help          Display this help

You can type command --help to get context help

------- GNU GPL v.3 -------
No guarantees are provided, including workability and applicability for any purposes.

(c) Petr Senichenkov, 2023
Source code: https://github.com/Petua41/SpecialTask.git</help>
</commands>