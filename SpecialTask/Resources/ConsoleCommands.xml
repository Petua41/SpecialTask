<?xml version="1.0" encoding="utf-8" ?>
<commands>
  <!-- I should add some kind of easter egg. Like moo or draw_logo -->
  
	<!-- new -->
	<command userInput="new circle" 
           commandClass="CreateCircle" 
           supportsUndo="true">
    Adds circle to the screen
		<argument shortArgument="x"
            longArgument="center_x" type="Int"
            isNecessary="true"
            commandParameterName="centerX" >
      X of center
    </argument>
    <argument shortArgument="y"
              longArgument="center_y" type="Int"
              isNecessary="true"
              commandParameterName="centerY" >
      Y of center
    </argument>
    <argument shortArgument="C"
              longArgument="color" type="Color"
              isNecessary="true"
              commandParameterName="color" >
      Outline color
    </argument>
    <argument shortArgument="r"
              longArgument="radius" type="Int"
              isNecessary="true"
              commandParameterName="radius" >
      Radius
    </argument>
    <argument shortArgument="t"
              longArgument="line_thickness"
              type="Int" isNecessary="true"
              commandParameterName="lineThickness" >
      Outline thickness
    </argument>
    <argument shortArgument="s"
              longArgument="streak"
              commandParameterName="streak"
              defaultValue="false" >
      Add streak (default is false)
    </argument>
    <argument shortArgument="c"
              longArgument="streak_color"
              type="Color"
              commandParameterName="streakColor"
              defaultValue="None" >
      Streak color (default is transparent)
    </argument>
    <argument shortArgument="T"
              longArgument="texture"
              type="Texture"
              commandParameterName="streakTexture"
              defaultValue="None" >
      Streak texture (default is transparent)
    </argument>
	</command>
  
	<command userInput="new rectangle" 
           commandClass="CreateSquare" 
           supportsUndo="true">
    Adds rectangle to the screen
    <argument shortArgument="x"
            longArgument="left_top_x"
            type="Int"
            isNecessary="true"
            commandParameterName="leftTopX" >
      X of left-top corner
    </argument>
    <argument shortArgument="y"
              longArgument="left_top_y"
              type="Int"
              isNecessary="true"
              commandParameterName="leftTopY" >
      Y of left-top corner
    </argument>
    <argument shortArgument="X"
              longArgument="right_bottom_x"
              type="Int"
              isNecessary="true"
              commandParameterName="rightBottomX" >
      X of right-bottom corner
    </argument>
    <argument shortArgument="Y"
              longArgument="right_bottom_y"
              type="Int"
              isNecessary="true"
              commandParameterName="rightBottomY" >
      Y of right-bottom corner
    </argument>
    <argument shortArgument="C"
              longArgument="color"
              type="Color"
              isNecessary="true"
              commandParameterName="color" >
      Outline color
    </argument>
    <argument shortArgument="t"
              longArgument="line_thickness"
              type="Int"
              isNecessary="true"
              commandParameterName="lineThickness" >
      Outline thickness
    </argument>
    <argument shortArgument="s"
              longArgument="streak"
              commandParameterName="streak"
              defaultValue="false" >
      Add streak (default is false)
    </argument>
    <argument shortArgument="c"
              longArgument="streak_color"
              type="Color"
              commandParameterName="streakColor"
              defaultValue="None" >
      Streak color (default is transparent)
    </argument>
    <argument shortArgument="T"
              longArgument="texture"
              type="Texture"
              commandParameterName="streakTexture"
              defaultValue="None" >
      Streak texture (default is transparent)
    </argument>
	</command>
  
	<command userInput="new line" 
           commandClass="CreateLine" 
           supportsUndo="true">
    Adds line to the screen
    <argument shortArgument="x"
            longArgument="first_x"
            type="Int"
            isNecessary="true"
            commandParameterName="firstX" >
      X of first point
    </argument>
    <argument shortArgument="y"
              longArgument="first_y"
              type="Int"
              isNecessary="true"
              commandParameterName="firstY" >
      Y of first point
    </argument>
    <argument shortArgument="X"
              longArgument="second_x"
              type="Int"
              isNecessary="true"
              commandParameterName="secondX" >
      X of second point
    </argument>
    <argument shortArgument="Y"
              longArgument="second_y"
              type="Int"
              isNecessary="true"
              commandParameterName="secondY" >
      Y of second point
    </argument>
    <argument shortArgument="C"
              longArgument="color"
              type="Color"
              isNecessary="true"
              commandParameterName="color" >
      Line color
    </argument>
    <argument shortArgument="t"
              longArgument="line_thickness"
              type="Int"
              isNecessary="true"
              commandParameterName="lineThickness" >
      Line thickness
    </argument>
    <argument shortArgument="s"
              longArgument="streak"
              commandParameterName="streak"
              defaultValue="false" >
      Add streak (no effect, default is false)
    </argument>
    <argument shortArgument="c"
              longArgument="streak_color"
              type="Color"
              commandParameterName="streakColor"
              defaultValue="None" >
      Streak color (no effect, default is transparent)
    </argument>
    <argument shortArgument="T"
              longArgument="texture"
              type="Texture"
              commandParameterName="streakTexture"
              defaultValue="None" >
      Streak texture (no effect, default is transparent)
    </argument>
	</command>
  
  <command userInput="new text" 
           commandClass="CreateText" 
           supportsUndo="true">
    Adds text to the screen
    <argument shortArgument="x"
            longArgument="left_top_x"
            type="Int"
            isNecessary="true"
            commandParameterName="leftTopX" >
      X of left-top corner
    </argument>
    <argument shortArgument="y"
              longArgument="left_top_y"
              type="Int"
              isNecessary="true"
              commandParameterName="leftTopY" >
      Y of left-top corner
    </argument>
    <argument shortArgument="f"
              longArgument="font_size"
              type="Int"
              isNecessary="true"
              commandParameterName="fontSize" >
      Font size
    </argument>
    <argument shortArgument="t"
              longArgument="text"
              type="String"
              isNecessary="true"
              commandParameterName="textValue" >
      Text value
    </argument>
    <argument shortArgument="C"
              longArgument="color"
              type="Color"
              isNecessary="true"
              commandParameterName="color" >
      Color of text
    </argument>
    <argument shortArgument="s"
              longArgument="streak"
              commandParameterName="streak"
              defaultValue="false" >
      Add streak (no effect, default is false)
    </argument>
    <argument shortArgument="c"
              longArgument="streak_color"
              type="Color"
              commandParameterName="streakColor"
              defaultValue="None" >
      Streak color (no effect, default is transparent)
    </argument>
    <argument shortArgument="T"
              longArgument="texture"
              type="Texture"
              commandParameterName="streakTexture"
              defaultValue="None" >
      Streak texture (no effect, default is transparent)
    </argument>
  </command>
  
  <command userInput="new polygon" 
           commandClass="CreatePolygon" 
           supportsUndo="true">
    Adds polygon to the screen
    <argument shortArgument="p"
            longArgument="points"
            type="Points"
            isNecessary="true"
            commandParameterName="points" >
      Points (X and Y are separated by a space, pairs are separated by a comma, e. g. X1 Y1, X2 Y2)
    </argument>
    <argument shortArgument="C"
              longArgument="color"
              type="Color"
              isNecessary="true"
              commandParameterName="color" >
      Outline color
    </argument>
    <argument shortArgument="t"
              longArgument="line_thickness"
              type="Int"
              isNecessary="true"
              commandParameterName="lineThickness" >
      Outline thickness
    </argument>
    <argument shortArgument="s"
              longArgument="streak"
              commandParameterName="streak"
              defaultValue="false" >
      Add streak (default is false)
    </argument>
    <argument shortArgument="c"
              longArgument="streak_color"
              type="Color"
              commandParameterName="streakColor"
              defaultValue="None" >
      Streak color (default is transparent)
    </argument>
    <argument shortArgument="T"
              longArgument="texture"
              type="Texture"
              commandParameterName="streakTexture"
              defaultValue="None" >
      Streak texture (default is transparent)
    </argument>
  </command>
  
	<!-- window -->
	<command userInput="window create" 
           commandClass="CreateWindow">
    Creates new window to draw
  </command>
  
	<command userInput="window delete" 
           commandClass="DeleteWindow">
    Closes specified window
    <argument shortArgument="n"
            longArgument="number"
            isNecessary="true"
            type="Int"
            commandParameterName="number">
      Number of window (from window title)
    </argument>
	</command>
  
	<command userInput="window switch" 
           commandClass="SwitchWindow">
    Switches to specified window
    <argument shortArgument="n"
            longArgument="number"
            isNecessary="true"
            type="Int"
            commandParameterName="number" >
      Number of window (from window title)
    </argument>
	</command>
  
	<!-- edit -->
	<command userInput="edit" 
           commandClass="Edit" 
           supportsUndo="true">
    Select figure on the screen and edit it
    <argument shortArgument="t"
            longArgument="creation_time"
            commandParameterName="creationTime"
            defaultValue="true" >
      Display fidures in creation-time order (default)
    </argument>
    <argument shortArgument="c"
              longArgument="coordinates"
              commandParameterName="coordinates"
              defaultValue="false" >
      Display figures by ascending coordinates of the center
    </argument>
	</command>
  
	<!-- select -->
	<command userInput="select" 
           commandClass="Select">
    Selects rectangular area, specified by coordinates of left-top and right-bottom corners
    <argument shortArgument="x"
            longArgument="left_top_x"
            type="Int"
            isNecessary="true"
            commandParameterName="leftTopX" >
      X of left-top corner
    </argument>
    <argument shortArgument="y"
              longArgument="left_top_y"
              type="Int"
              isNecessary="true"
              commandParameterName="leftTopY" >
      Y of left-top corner
    </argument>
    <argument shortArgument="X"
              longArgument="right_bottom_x"
              type="Int"
              isNecessary="true"
              commandParameterName="rightBottomX" >
      X of right-bottom corner
    </argument>
    <argument shortArgument="Y"
              longArgument="right_bottom_y"
              type="Int"
              isNecessary="true"
              commandParameterName="rightBottomY" >
      Y of right-bottom corner
    </argument>
	</command>
  
  <!-- paste -->
  <command userInput="paste" 
           commandClass="Paste" 
           supportsUndo="true">
    Pastes selected area
    <argument shortArgument="x"
            longArgument="leftTopX"
            type="Int"
            isNecessary="true"
            commandParameterName="leftTopX" >
      X of left-top corner
    </argument>
    <argument shortArgument="y"
              longArgument="leftTopY"
              type="Int"
              commandParameterName="leftTopY" >
      Y of left-top corner
    </argument>
  </command>
  
	<!-- undo -->
	<command userInput="undo" 
           commandClass="Undo">
    Cancels last commands
    <argument shortArgument="n"
            longArgument="number"
            type="Int"
            commandParameterName="number"
            defaultValue="1" >
      Number of commands to undo (default is 1)
    </argument>
	</command>
  
	<!-- redo -->
	<command userInput="redo" 
           commandClass="Redo">
    Repeats last cancelled commands
    <argument shortArgument="n"
            longArgument="number"
            type="Int"
            commandParameterName="number"
            defaultValue="1" >
      Number of commands to redo (default is 1)
    </argument>
	</command>
  
	<!-- save -->
	<command userInput="save" 
           commandClass="Save">
    Save file
  </command>
  
	<!-- save_as -->
	<command userInput="save_as" 
           commandClass="SaveAs">
    Save file as
    <argument shortArgument="f"
            longArgument="filename"
            isNecessary="true"
            type="String"
            commandParameterName="filename" >
      Name of file to save (if path is relative, saves to default save directory)
    </argument>
	</command>
  
	<!-- load -->
	<command userInput="load" 
           commandClass="Load">
    Load file
    <argument shortArgument="f"
            longArgument="filename"
            type="String"
            isNecessary="true"
            commandParameterName="filename" >
      Name of file to save  (if path is relative, saves to default save directory)
    </argument>
    <argument shortArgument="c"
              longArgument="clear"
              defaultValue="false"
              commandParameterName="clearScreen" >
      Clear screen before loading (default is false)
    </argument>
	</command>
  
  <!-- exit -->
  <command userInput="exit" 
           commandClass="Exit">
    Close application
  </command>
  
  <!-- colors -->
  <command userInput="colors" 
           commandClass="Colors">
    Display list of colors (colored)
  </command>
  
  <!-- textures -->
  <command userInput="textures" 
           commandClass="Textures">
    Display list of streak textures (with descriptions)
  </command>
  
  <!-- clear -->
  <command userInput="clear" 
           commandClass="Clear" 
           supportsUndo="true">
    Clear current screen
  </command>
  
  <!-- export -->
  <command userInput="export svg" 
           commandClass="ExportSVG">
    Export to svg
    <argument shortArgument="i"
            longArgument="in"
            type="String"
            commandParameterName="inFilename"
            defaultValue="" >
      Name of (.std) file to export (if not specified, exports current drawing)
    </argument>

    <argument shortArgument="o"
              longArgument="out"
              type="String"
              isNecessary="true"
              commandParameterName="outFilename" >
      Name of (.svg) file to export to
    </argument>
  </command>
  
  <command userInput="export pdf" 
           commandClass="ExportPDF">
    Export to pdf (experimental)
    <argument shortArgument="i" 
              longArgument="in" 
              type="String" 
              commandParameterName="inFilename" 
              defaultValue=""/>
    Name of (.std) file to export (if not specified, exports current drawing)
      <argument shortArgument="o"
            longArgument="out"
            type="String"
            isNecessary="true"
            commandParameterName="outFilename" >
      Name of (.pdf) file to export to
      </argument>
  </command>
  
  <!-- screenshot -->
  <command userInput="screenshot" 
           commandClass="Screenshot">
    Captures a screenshot of current drawing window and saves to .png (experimental)
      <argument shortArgument="f"
          longArgument="filename"
          type="String"
          isNecessary="true"
          commandParameterName="filename" >
      Name of file to save screenshot
      </argument>
</command>

	<!-- fictional commands -->
	<command userInput="new" 
           fictional="true">
    Adds specified shape to the screen. You cannot invoke this command without specifying shape

[color:Magenta]Shapes:[color]
	circle
	rectangle
	line
	text
	polygon

Enter [color:Green]new shape --help[color] to get help on [color:Green]shape[color]
  </command>
  
	<command userInput="window" 
           fictional="true">
    Controls windows. You cannot invoke this command without specifying concrete action
[color:Magenta]Possible commands:[color]
	create
	switch
	delete
  </command>
  
  <command userInput="export" 
           fictional="true">
    Export to other formats. You cannot invoke this command without specifying file format
[color:Magenta]Availible formats:[color]
	SVG
	PDF
  </command>
	
	<!-- global help -->
	<help>
Special Task 1 ver.1.0.0

Console-managed graphic editor

Usage: command [arguments]

[color:Magenta]Commands:[color]
	new           Add shape to the screen
	window        Control windows
	edit          Edit shapes on the screen
	select        Select rectangular area
	paste         Paste selected area
	undo          Undo last actions
	redo          Redo last actions
	save          Save
	save_as       Save as
	load          Load
	clear         Clear current screen
	export        Export to other formats
  screenshot    Capture a screenshot
	
	colors        Get list of colors
	textures      Get list of streak textures
	help          Display this help

You can type [color:Green]command --help[color] to get context help

[color:Magenta]Keyboard shortcuts:[color]
	Ctrl+S       Save
	Ctrl+E       Previous command
	Ctrl+D       Next command
	Alt+Z        Undo
	Alt+Shift+Z  Redo
	Alt+C        Interrupt

    ------- GNU GPL v.3 -------
    This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
    without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    See the GNU General Public License for more details.

    (c) Petr Senichenkov, 2023
    Source code: [color:blue]https://github.com/Petua41/SpecialTask.git[color]
  </help>
</commands>